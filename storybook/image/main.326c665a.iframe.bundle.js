(self.webpackChunkng_easy=self.webpackChunkng_easy||[]).push([[179],{24038:module=>{function webpackEmptyAsyncContext(req){return Promise.resolve().then((()=>{var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}))}webpackEmptyAsyncContext.keys=()=>[],webpackEmptyAsyncContext.resolve=webpackEmptyAsyncContext,webpackEmptyAsyncContext.id=24038,module.exports=webpackEmptyAsyncContext},63168:(module,__unused_webpack_exports,__webpack_require__)=>{var map={"./image.component.stories.ts":72571};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=63168},89037:module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id=89037,module.exports=webpackEmptyContext},72571:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Fill:()=>Fill,Fixed:()=>Fixed,Intrinsic:()=>Intrinsic,Responsive:()=>Responsive,default:()=>image_component_stories});var models_namespaceObject={};__webpack_require__.r(models_namespaceObject);var src_namespaceObject={};__webpack_require__.r(src_namespaceObject),__webpack_require__.d(src_namespaceObject,{D3:()=>ImageFormat,_l:()=>dedupAndSortImageSizes,CC:()=>defaultImageOptimizerConfig,zo:()=>getImageFormat,V9:()=>getImageMimeType});var ImageFormat,client=__webpack_require__(70001),tslib_es6=__webpack_require__(70655),core=__webpack_require__(35752),platform_browser=__webpack_require__(45284),Subject=__webpack_require__(54236),startWith=__webpack_require__(91414),map=__webpack_require__(10047);function dedupAndSortImageSizes(imageSizes){return[...new Set([...imageSizes])].sort(((a,b)=>a-b))}!function(ImageFormat){ImageFormat.Png="png",ImageFormat.Jpeg="jpeg",ImageFormat.Webp="webp",ImageFormat.Avif="avif",ImageFormat.Heif="heif"}(ImageFormat||(ImageFormat={}));const imageFormatRegexMap=Object.values(ImageFormat).reduce(((map,format)=>(map[format]=format===ImageFormat.Jpeg?/\.jpe?g$/i:new RegExp(`\\.${format}$`,"i"),map)),{});function getImageFormat(src){for(const format in imageFormatRegexMap){if(imageFormatRegexMap[format].test(src))return format}throw new Error(`Image with src "${src}" has an unknown extension.`)}const imageTypeMap=Object.values(ImageFormat).reduce(((map,format)=>(map[format]=`image/${format}`,map)),{});function getImageMimeType(srcOrFormat){if(imageTypeMap[srcOrFormat])return imageTypeMap[srcOrFormat];const format=getImageFormat(srcOrFormat);return imageTypeMap[format]}const defaultImageOptimizerConfig={deviceSizes:[640,750,828,1080,1200,1920,2048,3840],imageSizes:[16,32,48,64,96,128,256,384],quality:{"slow-2g":30,"2g":40,"3g":50,"4g":75,saveData:40,default:75},formats:[ImageFormat.Jpeg,ImageFormat.Webp]};const IMAGE_OPTIMIZER_CONFIG=new core.InjectionToken("@ng-easy/image:image-optimizer-config");var _a;const viewportWidthRe=/(^|\s)(1?\d?\d)vw/g,preferredOptimizedFormats=[ImageFormat.Webp,ImageFormat.Avif,ImageFormat.Heif,ImageFormat.Jpeg],randomWidth=Math.floor(1e3*Math.random())+100;let ImageLoader=class ImageLoader{constructor(imageOptimizerConfig){this.imageOptimizerConfig=imageOptimizerConfig,this.allSizes=dedupAndSortImageSizes([...this.imageOptimizerConfig.deviceSizes,...this.imageOptimizerConfig.imageSizes]),this.deviceSizes=dedupAndSortImageSizes(this.imageOptimizerConfig.deviceSizes),this.supportsOptimization=this.getImageUrl({src:"test",width:randomWidth,quality:75,format:ImageFormat.Jpeg}).includes(randomWidth.toString());const supportedFormats=new Set([...imageOptimizerConfig.formats,ImageFormat.Jpeg]),preferredOptimizedFormat=preferredOptimizedFormats.find((preferredFormat=>supportedFormats.has(preferredFormat)));if(null==preferredOptimizedFormat)throw new Error("There is not a supported preferred image optimizer format.");this.preferredOptimizedFormat=preferredOptimizedFormat}getImageSources({src,width,layout,sizes,unoptimized}){if(unoptimized)return[{src,sizes:"",srcset:"",mimeType:getImageMimeType(src)}];const{widths,kind}=this.getWidths(width,layout,sizes),lastWidthIndex=widths.length-1,quality=function getQuality(configQuality){if("number"==typeof configQuality)return configQuality;if(!("connection"in window.navigator))return configQuality.default;const connection=window.navigator.connection;if(connection.saveData)return configQuality.saveData;switch(connection.effectiveType){case"slow-2g":return configQuality["slow-2g"];case"2g":return configQuality["2g"];case"3g":return configQuality["3g"];case"4g":return configQuality["4g"]}}(this.imageOptimizerConfig.quality);return this.getImageOptimizedFormats(src,unoptimized).map((format=>({sizes:sizes||"w"!==kind?sizes:"100vw",srcset:widths.map(((width,index)=>`${this.getImageUrl({src,quality,width,format})} ${"w"===kind?width:index+1}${kind}`)).join(", "),src:this.getImageUrl({src,quality,width:widths[lastWidthIndex],format}),mimeType:getImageMimeType(format)})))}getPlaceholderSrc(src){return this.getImageUrl({src,quality:15,width:15,format:this.preferredOptimizedFormat})}getImageOptimizedFormats(src,unoptimized){const format=getImageFormat(src);return format===ImageFormat.Png?[ImageFormat.Png]:unoptimized?[format]:[...new Set([this.preferredOptimizedFormat,ImageFormat.Jpeg])]}getWidths(width,layout,sizes){if(sizes&&("fill"===layout||"responsive"===layout)){const percentSizes=[];for(let match;match=viewportWidthRe.exec(sizes);match)percentSizes.push(parseInt(match[2]));if(percentSizes.length){const smallestRatio=.01*Math.min(...percentSizes);return{widths:this.allSizes.filter((size=>size>=this.deviceSizes[0]*smallestRatio)),kind:"w"}}return{widths:[...this.allSizes],kind:"w"}}if(null==width||"fill"===layout||"responsive"===layout)return{widths:[...this.deviceSizes],kind:"w"};return{widths:[...new Set([width,2*width].map((w=>this.allSizes.find((p=>p>=w))||this.allSizes[this.allSizes.length-1])))],kind:"x"}}};ImageLoader=(0,tslib_es6.gn)([(0,tslib_es6.fM)(0,(0,core.Inject)(IMAGE_OPTIMIZER_CONFIG)),(0,tslib_es6.w6)("design:paramtypes",["function"==typeof(_a=void 0!==src_namespaceObject.ImageOptimizerConfig&&src_namespaceObject.ImageOptimizerConfig)?_a:Object])],ImageLoader);let DefaultImageLoader=class DefaultImageLoader extends ImageLoader{getImageUrl({src,width,quality,format}){return`${src}?w=${width}&q=${quality}&fm=${format}`}};var image_component_a,_b,_c,_d,_e,_f,_g;DefaultImageLoader=(0,tslib_es6.gn)([(0,core.Injectable)()],DefaultImageLoader);let ImageComponent=class ImageComponent{constructor(imageLoader,window,domSanitizer){this.imageLoader=imageLoader,this.window=window,this.domSanitizer=domSanitizer,this.src="",this.alt="",this.layout="intrinsic",this.sizes="100vw",this.priority=!1,this.placeholder="empty",this.unoptimized=!1,this.objectFit="cover",this.objectPosition="50% 50%",this.loadingComplete=new core.EventEmitter,this.ngOnChanges$=new Subject.xQ,this.changes$=this.ngOnChanges$.pipe((0,startWith.O)(void 0)),this.sizerSvg$=this.changes$.pipe((0,map.U)((()=>{if("intrinsic"!==this.layout)return null;const sizerSvg=this.window.btoa(`<svg width="${this.width}" height="${this.height}" xmlns="http://www.w3.org/2000/svg" version="1.1"/>`);return this.domSanitizer.bypassSecurityTrustUrl(`data:image/svg+xml;base64,${sizerSvg}`)}))),this.sources$=this.changes$.pipe((0,map.U)((()=>this.imageLoader.getImageSources({src:this.src,width:this.width,layout:this.layout,sizes:this.sizes,unoptimized:this.unoptimized})))),this.blurBackgroundImage$=this.changes$.pipe((0,map.U)((()=>"blur"===this.placeholder?this.blurDataURL?`url("${this.blurDataURL}")`:`url("${this.imageLoader.getPlaceholderSrc(this.src)}")`:"none"))),this.isImageLoaded=!1}get loading(){return this.priority?"eager":"lazy"}get showSizer(){return"intrinsic"===this.layout||"responsive"===this.layout}get sizeRatio(){return null==this.height||null==this.width?0:this.height/this.width}get sizerPaddingTop(){return"responsive"===this.layout?100*this.sizeRatio+"%":"auto"}get wrapperWidth(){var _a;return"fixed"===this.layout?`${null!==(_a=this.width)&&void 0!==_a?_a:0}px`:"auto"}get wrapperHeight(){var _a;return"fixed"===this.layout?`${null!==(_a=this.height)&&void 0!==_a?_a:0}px`:"auto"}get blurFilter(){return"blur"===this.placeholder&&this.blurDataURL&&!this.isImageLoaded?"blur(20px)":"none"}ngOnChanges(){this.validateInputs(),this.ngOnChanges$.next()}ngAfterViewInit(){var _a;(null===(_a=this.image)||void 0===_a?void 0:_a.nativeElement.complete)&&this.onLoad()}getImageMime(_,{mimeType:mime}){return mime}onLoad(){if(!this.image)return;if(!this.image.nativeElement.src.startsWith("data:")){("decode"in this.image.nativeElement?this.image.nativeElement.decode():Promise.resolve()).catch((()=>null)).then((()=>{this.isImageLoaded=!0,this.loadingComplete.emit()}))}if(!(0,core.isDevMode)()||"intrinsic"!==this.layout)return;const{naturalWidth,naturalHeight}=this.image.nativeElement;null!=this.width&&this.width!=naturalWidth&&console.warn(`Image with src "${this.src}" should have "width" of ${naturalWidth}.`),null!=this.height&&this.height!=naturalHeight&&console.warn(`Image with src "${this.src}" should have "height" of ${naturalHeight}.`)}validateInputs(){var _a,_b;if(this.src.startsWith("data:")&&(this.unoptimized=!0,this.priority=!1),"fill"!==this.layout&&(null==this.width||null==this.height||this.width<=0||this.height<=0))throw new Error(`Image with src "${this.src}" must use "width" and "height" properties or "layout='fill'" property.`);(0,core.isDevMode)()&&("fill"!==this.layout||null==this.width&&null==this.width||this.src,0===this.alt.trim().length&&console.warn(`Image with src "${this.src}" must use an "alt" property.`),this.unoptimized||this.imageLoader.supportsOptimization||console.warn(`Image with src "${this.src}" uses a loader that does not implement width. Please implement it or use the "unoptimized" property instead.`),"blur"===this.placeholder&&("fill"!==this.layout&&(null!==(_a=this.width)&&void 0!==_a?_a:0)*(null!==(_b=this.height)&&void 0!==_b?_b:0)<1600&&console.warn(`Image with src "${this.src}" is smaller than 40x40. Consider removing the "placeholder='blur'" property to improve performance.`),this.blurDataURL||this.imageLoader.supportsOptimization||console.warn(`Image with src "${this.src}" has "placeholder='blur'" property but is missing the "blurDataURL" property. Placeholder could be fetched from the loader, but it doesn't support optimization. Please implement it, or pass an inline "blurDataURL".`)))}};(0,tslib_es6.gn)([(0,core.ViewChild)("image",{static:!1}),(0,tslib_es6.w6)("design:type","function"==typeof(image_component_a=void 0!==core.ElementRef&&core.ElementRef)?image_component_a:Object)],ImageComponent.prototype,"image",void 0),(0,tslib_es6.gn)([(0,core.Input)(),(0,tslib_es6.w6)("design:type",Object)],ImageComponent.prototype,"src",void 0),(0,tslib_es6.gn)([(0,core.Input)(),(0,tslib_es6.w6)("design:type",Object)],ImageComponent.prototype,"alt",void 0),(0,tslib_es6.gn)([(0,core.Input)(),(0,tslib_es6.w6)("design:type",Number)],ImageComponent.prototype,"width",void 0),(0,tslib_es6.gn)([(0,core.Input)(),(0,tslib_es6.w6)("design:type",Number)],ImageComponent.prototype,"height",void 0),(0,tslib_es6.gn)([(0,core.Input)(),(0,tslib_es6.w6)("design:type","function"==typeof(_b=void 0!==models_namespaceObject.ImageLayout&&models_namespaceObject.ImageLayout)?_b:Object)],ImageComponent.prototype,"layout",void 0),(0,tslib_es6.gn)([(0,core.Input)(),(0,tslib_es6.w6)("design:type",Object)],ImageComponent.prototype,"sizes",void 0),(0,tslib_es6.gn)([(0,core.Input)(),(0,tslib_es6.w6)("design:type",Object)],ImageComponent.prototype,"priority",void 0),(0,tslib_es6.gn)([(0,core.Input)(),(0,tslib_es6.w6)("design:type","function"==typeof(_c=void 0!==models_namespaceObject.ImagePlaceholder&&models_namespaceObject.ImagePlaceholder)?_c:Object)],ImageComponent.prototype,"placeholder",void 0),(0,tslib_es6.gn)([(0,core.Input)(),(0,tslib_es6.w6)("design:type",String)],ImageComponent.prototype,"blurDataURL",void 0),(0,tslib_es6.gn)([(0,core.Input)(),(0,tslib_es6.w6)("design:type",Object)],ImageComponent.prototype,"unoptimized",void 0),(0,tslib_es6.gn)([(0,core.Input)(),(0,tslib_es6.w6)("design:type","function"==typeof(_d=void 0!==models_namespaceObject.ObjectFit&&models_namespaceObject.ObjectFit)?_d:Object)],ImageComponent.prototype,"objectFit",void 0),(0,tslib_es6.gn)([(0,core.Input)(),(0,tslib_es6.w6)("design:type",Object)],ImageComponent.prototype,"objectPosition",void 0),(0,tslib_es6.gn)([(0,core.Output)(),(0,tslib_es6.w6)("design:type",Object)],ImageComponent.prototype,"loadingComplete",void 0),ImageComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"image[src]",template:(__webpack_require__(21118).default||__webpack_require__(21118)).length?__webpack_require__(21118).default||__webpack_require__(21118):"",styles:[(__webpack_require__(14909).default||__webpack_require__(14909)).length?__webpack_require__(14909).default||__webpack_require__(14909):""],changeDetection:core.ChangeDetectionStrategy.OnPush}),(0,tslib_es6.w6)("design:paramtypes",["function"==typeof(_e=void 0!==ImageLoader&&ImageLoader)?_e:Object,"function"==typeof(_f="undefined"!=typeof Window&&Window)?_f:Object,"function"==typeof(_g=void 0!==platform_browser.DomSanitizer&&platform_browser.DomSanitizer)?_g:Object])],ImageComponent);var ImageModule_1,common=__webpack_require__(54265);let ImageModule=ImageModule_1=class ImageModule{static forRoot({imageOptimizerConfig}){return{ngModule:ImageModule_1,providers:[{provide:ImageLoader,useClass:DefaultImageLoader},{provide:IMAGE_OPTIMIZER_CONFIG,useValue:null!=imageOptimizerConfig?imageOptimizerConfig:defaultImageOptimizerConfig},{provide:Window,useValue:window}]}}};ImageModule=ImageModule_1=(0,tslib_es6.gn)([(0,core.NgModule)({declarations:[ImageComponent],imports:[common.ez],exports:[ImageComponent]})],ImageModule);const image_component_stories={title:"ImageComponent",component:ImageComponent,decorators:[(0,client.moduleMetadata)({imports:[ImageModule.forRoot({})]})],parameters:{controls:{exclude:["sizeRatio","wrapperWidth","wrapperHeight","sizerPaddingTop","sizerSvg","imageSrc","imageSrcset","imageSizes","blurFilter","onLoad","getImageMime"]}},args:{src:"https://assets.imgix.net/unsplash/bear.jpg",alt:"Bear",width:1080,height:720,placeholder:"blur"},argTypes:{src:{},width:{},height:{},layout:{control:{type:"select"},table:{defaultValue:{summary:"intrinsic"}}},sizes:{},placeholder:{control:{type:"select"},table:{defaultValue:{summary:"empty"}}},blurDataURL:{},unoptimized:{table:{defaultValue:{summary:!1}}},priority:{table:{defaultValue:{summary:!1}}},objectFit:{control:{type:"select"},table:{defaultValue:{summary:"cover"}}},objectPosition:{table:{defaultValue:{summary:"50% 50%"}}}}},Template=args=>({component:ImageComponent,props:args}),Intrinsic=Template.bind({});Intrinsic.args={};const Fixed=Template.bind({});Fixed.args={layout:"fixed"};const Responsive=Template.bind({});Responsive.args={layout:"responsive"};const Fill=Template.bind({});Fill.args={layout:"fill",width:void 0,height:void 0},Intrinsic.parameters=Object.assign({storySource:{source:"(args: ImageComponent) => ({\n  component: ImageComponent,\n  props: args,\n})"}},Intrinsic.parameters),Fixed.parameters=Object.assign({storySource:{source:"(args: ImageComponent) => ({\n  component: ImageComponent,\n  props: args,\n})"}},Fixed.parameters),Responsive.parameters=Object.assign({storySource:{source:"(args: ImageComponent) => ({\n  component: ImageComponent,\n  props: args,\n})"}},Responsive.parameters),Fill.parameters=Object.assign({storySource:{source:"(args: ImageComponent) => ({\n  component: ImageComponent,\n  props: args,\n})"}},Fill.parameters)},11417:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module=__webpack_require__.nmd(module),(0,__webpack_require__(70001).configure)([__webpack_require__(89037),__webpack_require__(63168)],module,!1)},31809:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";var preview_namespaceObject={};__webpack_require__.r(preview_namespaceObject),__webpack_require__.d(preview_namespaceObject,{parameters:()=>parameters});__webpack_require__(47941),__webpack_require__(82526),__webpack_require__(57327),__webpack_require__(38880),__webpack_require__(89554),__webpack_require__(54747),__webpack_require__(49337),__webpack_require__(33321),__webpack_require__(69070);var client_api=__webpack_require__(78880),esm=__webpack_require__(23827),angular=__webpack_require__(83156);const documentation_namespaceObject=JSON.parse('{"pipes":[],"interfaces":[{"name":"ImageModuleConfig","id":"interface-ImageModuleConfig-052fa6c11601e6b93afea584050a2f50","file":"src/lib/image.module.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ModuleWithProviders, NgModule } from \'@angular/core\';\\n\\nimport { defaultImageOptimizerConfig, ImageOptimizerConfig } from \'@ng-easy/image-config\';\\n\\nimport { ImageComponent } from \'./component\';\\nimport { DefaultImageLoader, ImageLoader } from \'./services\';\\nimport { IMAGE_OPTIMIZER_CONFIG } from \'./tokens\';\\n\\nexport interface ImageModuleConfig {\\n  imageOptimizerConfig?: ImageOptimizerConfig;\\n}\\n\\n@NgModule({\\n  declarations: [ImageComponent],\\n  imports: [CommonModule],\\n  exports: [ImageComponent],\\n})\\nexport class ImageModule {\\n  static forRoot({ imageOptimizerConfig }: ImageModuleConfig): ModuleWithProviders<ImageModule> {\\n    return {\\n      ngModule: ImageModule,\\n      providers: [\\n        { provide: ImageLoader, useClass: DefaultImageLoader },\\n        { provide: IMAGE_OPTIMIZER_CONFIG, useValue: imageOptimizerConfig ?? defaultImageOptimizerConfig },\\n        { provide: Window, useValue: window },\\n      ],\\n    };\\n  }\\n}\\n","properties":[{"name":"imageOptimizerConfig","deprecated":false,"deprecationMessage":"","type":"ImageOptimizerConfig","optional":true,"description":"","line":11}],"indexSignatures":[],"kind":163,"methods":[]},{"name":"ImageSources","id":"interface-ImageSources-2c0d21e56cfc407fd3f5a1647f30fe28","file":"src/lib/models/image-sources.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { ImageMimeType } from \'@ng-easy/image-config\';\\n\\nexport interface ImageSources {\\n  srcset: string;\\n  sizes: string;\\n  src: string;\\n  mimeType: ImageMimeType;\\n}\\n","properties":[{"name":"mimeType","deprecated":false,"deprecationMessage":"","type":"ImageMimeType","optional":false,"description":"","line":7},{"name":"sizes","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"","line":5},{"name":"src","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"","line":6},{"name":"srcset","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"","line":4}],"indexSignatures":[],"kind":163,"methods":[]},{"name":"ImageSourcesOptions","id":"interface-ImageSourcesOptions-a2208fbf5fb1bfb2e50fb2fc3344230d","file":"src/lib/models/image-sources-options.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { ImageLayout } from \'./image-layout\';\\n\\nexport interface ImageSourcesOptions {\\n  src: string;\\n  width: number | undefined;\\n  layout: ImageLayout;\\n  sizes: string;\\n  unoptimized: boolean;\\n}\\n","properties":[{"name":"layout","deprecated":false,"deprecationMessage":"","type":"ImageLayout","optional":false,"description":"","line":6},{"name":"sizes","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"","line":7},{"name":"src","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"","line":4},{"name":"unoptimized","deprecated":false,"deprecationMessage":"","type":"boolean","optional":false,"description":"","line":8},{"name":"width","deprecated":false,"deprecationMessage":"","type":"number | undefined","optional":false,"description":"","line":5}],"indexSignatures":[],"kind":163,"methods":[]},{"name":"ImageUrlOptions","id":"interface-ImageUrlOptions-1ca15ad0b8e669cf46673604d5a91afb","file":"src/lib/models/image-url-options.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { ImageFormat } from \'@ng-easy/image-config\';\\n\\nexport interface ImageUrlOptions {\\n  src: string;\\n  width: number;\\n  quality: number;\\n  format: ImageFormat;\\n}\\n","properties":[{"name":"format","deprecated":false,"deprecationMessage":"","type":"ImageFormat","optional":false,"description":"","line":7},{"name":"quality","deprecated":false,"deprecationMessage":"","type":"number","optional":false,"description":"","line":6},{"name":"src","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"","line":4},{"name":"width","deprecated":false,"deprecationMessage":"","type":"number","optional":false,"description":"","line":5}],"indexSignatures":[],"kind":163,"methods":[]}],"injectables":[{"name":"DefaultImageLoader","id":"injectable-DefaultImageLoader-7f2590891864e7b0663caa6604a5f826","file":"src/lib/services/image-loader.ts","properties":[{"name":"supportsOptimization","defaultValue":"this.getImageUrl({\\n    src: \'test\',\\n    width: randomWidth,\\n    quality: 75,\\n    format: ImageFormat.Jpeg,\\n  }).includes(randomWidth.toString())","deprecated":false,"deprecationMessage":"","type":"boolean","optional":false,"description":"","line":26,"modifierKind":[142],"inheritance":{"file":"ImageLoader"}}],"methods":[{"name":"getImageUrl","args":[{"type":"ImageUrlOptions","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"string","typeParameters":[],"line":127,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"type":"ImageUrlOptions","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}],"inheritance":{"file":"ImageLoader"}},{"name":"getImageSources","args":[{"type":"ImageSourcesOptions","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"ImageSources[]","typeParameters":[],"line":46,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"type":"ImageSourcesOptions","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}],"inheritance":{"file":"ImageLoader"}},{"name":"getPlaceholderSrc","args":[{"name":"src","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"string","typeParameters":[],"line":65,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"src","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}],"inheritance":{"file":"ImageLoader"}}],"deprecated":false,"deprecationMessage":"","description":"","rawdescription":"\\n","sourceCode":"import { Inject, Injectable } from \'@angular/core\';\\n\\nimport { ImageFormat, dedupAndSortImageSizes, getImageFormat, ImageOptimizerConfig, getImageMimeType } from \'@ng-easy/image-config\';\\n\\nimport { getQuality } from \'../functions\';\\nimport { ImageUrlOptions, ImageSourcesOptions, ImageSources, ImageLayout } from \'../models\';\\nimport { IMAGE_OPTIMIZER_CONFIG } from \'../tokens\';\\n\\nconst viewportWidthRe = /(^|\\\\s)(1?\\\\d?\\\\d)vw/g;\\nconst preferredOptimizedFormats: readonly ImageFormat[] = [ImageFormat.Webp, ImageFormat.Avif, ImageFormat.Heif, ImageFormat.Jpeg] as const;\\nconst placeholderQuality = 15;\\nconst placeholderWidth = 15;\\nconst randomWidth: number = Math.floor(Math.random() * 1000) + 100;\\n\\n/**\\n * Provider that resolves image URLs.\\n */\\nexport abstract class ImageLoader {\\n  private readonly allSizes: readonly number[] = dedupAndSortImageSizes([\\n    ...this.imageOptimizerConfig.deviceSizes,\\n    ...this.imageOptimizerConfig.imageSizes,\\n  ]);\\n  private readonly deviceSizes: readonly number[] = dedupAndSortImageSizes(this.imageOptimizerConfig.deviceSizes);\\n  private readonly preferredOptimizedFormat: ImageFormat;\\n\\n  readonly supportsOptimization: boolean = this.getImageUrl({\\n    src: \'test\',\\n    width: randomWidth,\\n    quality: 75,\\n    format: ImageFormat.Jpeg,\\n  }).includes(randomWidth.toString());\\n\\n  constructor(@Inject(IMAGE_OPTIMIZER_CONFIG) protected readonly imageOptimizerConfig: ImageOptimizerConfig) {\\n    const supportedFormats: Set<ImageFormat> = new Set([...imageOptimizerConfig.formats, ImageFormat.Jpeg]);\\n    const preferredOptimizedFormat: ImageFormat | undefined = preferredOptimizedFormats.find((preferredFormat) =>\\n      supportedFormats.has(preferredFormat)\\n    );\\n    if (preferredOptimizedFormat == null) {\\n      throw new Error(`There is not a supported preferred image optimizer format.`);\\n    }\\n    this.preferredOptimizedFormat = preferredOptimizedFormat;\\n  }\\n\\n  abstract getImageUrl(options: ImageUrlOptions): string;\\n\\n  getImageSources({ src, width, layout, sizes, unoptimized }: ImageSourcesOptions): ImageSources[] {\\n    if (unoptimized) {\\n      return [{ src, sizes: \'\', srcset: \'\', mimeType: getImageMimeType(src) }];\\n    }\\n\\n    const { widths, kind } = this.getWidths(width, layout, sizes);\\n    const lastWidthIndex: number = widths.length - 1;\\n    const quality: number = getQuality(this.imageOptimizerConfig.quality);\\n\\n    return this.getImageOptimizedFormats(src, unoptimized).map((format) => ({\\n      sizes: !sizes && kind === \'w\' ? \'100vw\' : sizes,\\n      srcset: widths\\n        .map((width, index) => `${this.getImageUrl({ src, quality, width, format })} ${kind === \'w\' ? width : index + 1}${kind}`)\\n        .join(\', \'),\\n      src: this.getImageUrl({ src, quality, width: widths[lastWidthIndex], format }),\\n      mimeType: getImageMimeType(format),\\n    }));\\n  }\\n\\n  getPlaceholderSrc(src: string): string {\\n    return this.getImageUrl({\\n      src,\\n      quality: placeholderQuality,\\n      width: placeholderWidth,\\n      format: this.preferredOptimizedFormat,\\n    });\\n  }\\n\\n  private getImageOptimizedFormats(src: string, unoptimized: boolean): ImageFormat[] {\\n    const format: ImageFormat = getImageFormat(src);\\n\\n    if (format === ImageFormat.Png) {\\n      return [ImageFormat.Png];\\n    } else if (unoptimized) {\\n      return [format];\\n    } else {\\n      return [...new Set([this.preferredOptimizedFormat, ImageFormat.Jpeg])];\\n    }\\n  }\\n\\n  private getWidths(width: number | undefined, layout: ImageLayout, sizes: string): { widths: number[]; kind: \'w\' | \'x\' } {\\n    if (sizes && (layout === \'fill\' || layout === \'responsive\')) {\\n      // Find all the \\"vw\\" percent sizes used in the sizes prop\\n      const percentSizes: number[] = [];\\n      for (let match; (match = viewportWidthRe.exec(sizes)); match) {\\n        percentSizes.push(parseInt(match[2]));\\n      }\\n\\n      if (percentSizes.length) {\\n        const smallestRatio: number = Math.min(...percentSizes) * 0.01;\\n        return {\\n          widths: this.allSizes.filter((size: number) => size >= this.deviceSizes[0] * smallestRatio),\\n          kind: \'w\',\\n        };\\n      }\\n      return { widths: [...this.allSizes], kind: \'w\' };\\n    }\\n\\n    if (width == null || layout === \'fill\' || layout === \'responsive\') {\\n      return { widths: [...this.deviceSizes], kind: \'w\' };\\n    }\\n\\n    const widths: number[] = [\\n      ...new Set(\\n        // > This means that most OLED screens that say they are 3x resolution,\\n        // > are actually 3x in the green color, but only 1.5x in the red and\\n        // > blue colors. Showing a 3x resolution image in the app vs a 2x\\n        // > resolution image will be visually the same, though the 3x image\\n        // > takes significantly more data. Even true 3x resolution screens are\\n        // > wasteful as the human eye cannot see that level of detail without\\n        // > something like a magnifying glass.\\n        // https://blog.twitter.com/engineering/en_us/topics/infrastructure/2019/capping-image-fidelity-on-ultra-high-resolution-devices.html\\n        [width, width * 2].map((w) => this.allSizes.find((p) => p >= w) || this.allSizes[this.allSizes.length - 1])\\n      ),\\n    ];\\n    return { widths, kind: \'x\' };\\n  }\\n}\\n\\n@Injectable()\\nexport class DefaultImageLoader extends ImageLoader {\\n  getImageUrl({ src, width, quality, format }: ImageUrlOptions) {\\n    return `${src}?w=${width}&q=${quality}&fm=${format}`;\\n  }\\n}\\n","extends":"ImageLoader","type":"injectable"}],"guards":[],"interceptors":[],"classes":[{"name":"ImageLoader","id":"class-ImageLoader-7f2590891864e7b0663caa6604a5f826","file":"src/lib/services/image-loader.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { Inject, Injectable } from \'@angular/core\';\\n\\nimport { ImageFormat, dedupAndSortImageSizes, getImageFormat, ImageOptimizerConfig, getImageMimeType } from \'@ng-easy/image-config\';\\n\\nimport { getQuality } from \'../functions\';\\nimport { ImageUrlOptions, ImageSourcesOptions, ImageSources, ImageLayout } from \'../models\';\\nimport { IMAGE_OPTIMIZER_CONFIG } from \'../tokens\';\\n\\nconst viewportWidthRe = /(^|\\\\s)(1?\\\\d?\\\\d)vw/g;\\nconst preferredOptimizedFormats: readonly ImageFormat[] = [ImageFormat.Webp, ImageFormat.Avif, ImageFormat.Heif, ImageFormat.Jpeg] as const;\\nconst placeholderQuality = 15;\\nconst placeholderWidth = 15;\\nconst randomWidth: number = Math.floor(Math.random() * 1000) + 100;\\n\\n/**\\n * Provider that resolves image URLs.\\n */\\nexport abstract class ImageLoader {\\n  private readonly allSizes: readonly number[] = dedupAndSortImageSizes([\\n    ...this.imageOptimizerConfig.deviceSizes,\\n    ...this.imageOptimizerConfig.imageSizes,\\n  ]);\\n  private readonly deviceSizes: readonly number[] = dedupAndSortImageSizes(this.imageOptimizerConfig.deviceSizes);\\n  private readonly preferredOptimizedFormat: ImageFormat;\\n\\n  readonly supportsOptimization: boolean = this.getImageUrl({\\n    src: \'test\',\\n    width: randomWidth,\\n    quality: 75,\\n    format: ImageFormat.Jpeg,\\n  }).includes(randomWidth.toString());\\n\\n  constructor(@Inject(IMAGE_OPTIMIZER_CONFIG) protected readonly imageOptimizerConfig: ImageOptimizerConfig) {\\n    const supportedFormats: Set<ImageFormat> = new Set([...imageOptimizerConfig.formats, ImageFormat.Jpeg]);\\n    const preferredOptimizedFormat: ImageFormat | undefined = preferredOptimizedFormats.find((preferredFormat) =>\\n      supportedFormats.has(preferredFormat)\\n    );\\n    if (preferredOptimizedFormat == null) {\\n      throw new Error(`There is not a supported preferred image optimizer format.`);\\n    }\\n    this.preferredOptimizedFormat = preferredOptimizedFormat;\\n  }\\n\\n  abstract getImageUrl(options: ImageUrlOptions): string;\\n\\n  getImageSources({ src, width, layout, sizes, unoptimized }: ImageSourcesOptions): ImageSources[] {\\n    if (unoptimized) {\\n      return [{ src, sizes: \'\', srcset: \'\', mimeType: getImageMimeType(src) }];\\n    }\\n\\n    const { widths, kind } = this.getWidths(width, layout, sizes);\\n    const lastWidthIndex: number = widths.length - 1;\\n    const quality: number = getQuality(this.imageOptimizerConfig.quality);\\n\\n    return this.getImageOptimizedFormats(src, unoptimized).map((format) => ({\\n      sizes: !sizes && kind === \'w\' ? \'100vw\' : sizes,\\n      srcset: widths\\n        .map((width, index) => `${this.getImageUrl({ src, quality, width, format })} ${kind === \'w\' ? width : index + 1}${kind}`)\\n        .join(\', \'),\\n      src: this.getImageUrl({ src, quality, width: widths[lastWidthIndex], format }),\\n      mimeType: getImageMimeType(format),\\n    }));\\n  }\\n\\n  getPlaceholderSrc(src: string): string {\\n    return this.getImageUrl({\\n      src,\\n      quality: placeholderQuality,\\n      width: placeholderWidth,\\n      format: this.preferredOptimizedFormat,\\n    });\\n  }\\n\\n  private getImageOptimizedFormats(src: string, unoptimized: boolean): ImageFormat[] {\\n    const format: ImageFormat = getImageFormat(src);\\n\\n    if (format === ImageFormat.Png) {\\n      return [ImageFormat.Png];\\n    } else if (unoptimized) {\\n      return [format];\\n    } else {\\n      return [...new Set([this.preferredOptimizedFormat, ImageFormat.Jpeg])];\\n    }\\n  }\\n\\n  private getWidths(width: number | undefined, layout: ImageLayout, sizes: string): { widths: number[]; kind: \'w\' | \'x\' } {\\n    if (sizes && (layout === \'fill\' || layout === \'responsive\')) {\\n      // Find all the \\"vw\\" percent sizes used in the sizes prop\\n      const percentSizes: number[] = [];\\n      for (let match; (match = viewportWidthRe.exec(sizes)); match) {\\n        percentSizes.push(parseInt(match[2]));\\n      }\\n\\n      if (percentSizes.length) {\\n        const smallestRatio: number = Math.min(...percentSizes) * 0.01;\\n        return {\\n          widths: this.allSizes.filter((size: number) => size >= this.deviceSizes[0] * smallestRatio),\\n          kind: \'w\',\\n        };\\n      }\\n      return { widths: [...this.allSizes], kind: \'w\' };\\n    }\\n\\n    if (width == null || layout === \'fill\' || layout === \'responsive\') {\\n      return { widths: [...this.deviceSizes], kind: \'w\' };\\n    }\\n\\n    const widths: number[] = [\\n      ...new Set(\\n        // > This means that most OLED screens that say they are 3x resolution,\\n        // > are actually 3x in the green color, but only 1.5x in the red and\\n        // > blue colors. Showing a 3x resolution image in the app vs a 2x\\n        // > resolution image will be visually the same, though the 3x image\\n        // > takes significantly more data. Even true 3x resolution screens are\\n        // > wasteful as the human eye cannot see that level of detail without\\n        // > something like a magnifying glass.\\n        // https://blog.twitter.com/engineering/en_us/topics/infrastructure/2019/capping-image-fidelity-on-ultra-high-resolution-devices.html\\n        [width, width * 2].map((w) => this.allSizes.find((p) => p >= w) || this.allSizes[this.allSizes.length - 1])\\n      ),\\n    ];\\n    return { widths, kind: \'x\' };\\n  }\\n}\\n\\n@Injectable()\\nexport class DefaultImageLoader extends ImageLoader {\\n  getImageUrl({ src, width, quality, format }: ImageUrlOptions) {\\n    return `${src}?w=${width}&q=${quality}&fm=${format}`;\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"imageOptimizerConfig","type":"ImageOptimizerConfig","deprecated":false,"deprecationMessage":""}],"line":31,"jsdoctags":[{"name":"imageOptimizerConfig","type":"ImageOptimizerConfig","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"properties":[{"name":"supportsOptimization","defaultValue":"this.getImageUrl({\\n    src: \'test\',\\n    width: randomWidth,\\n    quality: 75,\\n    format: ImageFormat.Jpeg,\\n  }).includes(randomWidth.toString())","deprecated":false,"deprecationMessage":"","type":"boolean","optional":false,"description":"","line":26,"modifierKind":[142]}],"description":"<p>Provider that resolves image URLs.</p>\\n","rawdescription":"\\n\\nProvider that resolves image URLs.\\n","methods":[{"name":"getImageSources","args":[{"type":"ImageSourcesOptions","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"ImageSources[]","typeParameters":[],"line":46,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"type":"ImageSourcesOptions","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getImageUrl","args":[{"name":"options","type":"ImageUrlOptions","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"string","typeParameters":[],"line":44,"deprecated":false,"deprecationMessage":"","modifierKind":[125],"jsdoctags":[{"name":"options","type":"ImageUrlOptions","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getPlaceholderSrc","args":[{"name":"src","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"string","typeParameters":[],"line":65,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"src","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"indexSignatures":[],"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]}],"directives":[],"components":[{"name":"ImageComponent","id":"component-ImageComponent-1cd83a3b32d9e2f62eacce779b55bddd","file":"src/lib/component/image.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"image[src]","styleUrls":["image.component.scss"],"styles":[],"templateUrl":["image.component.html"],"viewProviders":[],"inputsClass":[{"name":"alt","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"The `alt` attribute provides alternative information for an image if a user for some reason cannot view it\\n(because of slow connection, an error in the src attribute, or if the user uses a screen reader).","description":"<p>The <code>alt</code> attribute provides alternative information for an image if a user for some reason cannot view it\\n(because of slow connection, an error in the src attribute, or if the user uses a screen reader).</p>\\n","line":38,"type":"string"},{"name":"blurDataURL","deprecated":false,"deprecationMessage":"","rawdescription":"A Data URL to be used as a placeholder image before the `src` image successfully loads. Only takes effect when combined with `placeholder=\\"blur\\"`.\\nMust be a base64-encoded image. It will be enlarged and blurred, so a very small image (10px or less) is recommended. Including larger images as placeholders may harm your application performance.\\n\\nIf not provided inline and the loader supports optimization a small placeholder will be fetched automatically.","description":"<p>A Data URL to be used as a placeholder image before the <code>src</code> image successfully loads. Only takes effect when combined with <code>placeholder=&quot;blur&quot;</code>.\\nMust be a base64-encoded image. It will be enlarged and blurred, so a very small image (10px or less) is recommended. Including larger images as placeholders may harm your application performance.</p>\\n<p>If not provided inline and the loader supports optimization a small placeholder will be fetched automatically.</p>\\n","line":91,"type":"string"},{"name":"height","deprecated":false,"deprecationMessage":"","rawdescription":"The height of the image, in pixels. Must be an integer without a unit.\\nRequired, except for those with `layout=\\"fill\\"`.","description":"<p>The height of the image, in pixels. Must be an integer without a unit.\\nRequired, except for those with <code>layout=&quot;fill&quot;</code>.</p>\\n","line":50,"type":"number"},{"name":"layout","defaultValue":"\'intrinsic\'","deprecated":false,"deprecationMessage":"","rawdescription":"The layout behavior of the image as the viewport changes size. Defaults to `intrinsic`.\\n\\n* When `fixed,` the image dimensions will not change as the viewport changes (no responsiveness) similar to the native img element.\\n* When `intrinsic`, the image will scale the dimensions down for smaller viewports but maintain the original dimensions for larger viewports.\\n* When `responsive`, the image will scale the dimensions down for smaller viewports and scale up for larger viewports.\\n* When `fill`, the image will stretch both width and height to the dimensions of the parent element, provided the parent element is relative. This is usually paired with the objectFit property.","description":"<p>The layout behavior of the image as the viewport changes size. Defaults to <code>intrinsic</code>.</p>\\n<ul>\\n<li>When <code>fixed,</code> the image dimensions will not change as the viewport changes (no responsiveness) similar to the native img element.</li>\\n<li>When <code>intrinsic</code>, the image will scale the dimensions down for smaller viewports but maintain the original dimensions for larger viewports.</li>\\n<li>When <code>responsive</code>, the image will scale the dimensions down for smaller viewports and scale up for larger viewports.</li>\\n<li>When <code>fill</code>, the image will stretch both width and height to the dimensions of the parent element, provided the parent element is relative. This is usually paired with the objectFit property.</li>\\n</ul>\\n","line":60,"type":"ImageLayout"},{"name":"objectFit","defaultValue":"\'cover\'","deprecated":false,"deprecationMessage":"","rawdescription":"The image fit when using `layout=\\"fill\\"`.","description":"<p>The image fit when using <code>layout=&quot;fill&quot;</code>.</p>\\n","line":101,"type":"ObjectFit"},{"name":"objectPosition","defaultValue":"\'50% 50%\'","deprecated":false,"deprecationMessage":"","rawdescription":"The image fit when using `layout=\\"fill\\"`.","description":"<p>The image fit when using <code>layout=&quot;fill&quot;</code>.</p>\\n","line":106,"type":"string"},{"name":"placeholder","defaultValue":"\'empty\'","deprecated":false,"deprecationMessage":"","rawdescription":"A placeholder to use while the image is loading in base, possible values are blur or empty. Defaults to `empty`.\\n\\nWhen `blur`, the `blurDataURL` property will be used as the placeholder.\\nIf using server-side rendering then `blurDataURL` will automatically be populated.\\n\\nWhen `empty`, there will be no placeholder while the image is loading, only empty space.","description":"<p>A placeholder to use while the image is loading in base, possible values are blur or empty. Defaults to <code>empty</code>.</p>\\n<p>When <code>blur</code>, the <code>blurDataURL</code> property will be used as the placeholder.\\nIf using server-side rendering then <code>blurDataURL</code> will automatically be populated.</p>\\n<p>When <code>empty</code>, there will be no placeholder while the image is loading, only empty space.</p>\\n","line":83,"type":"ImagePlaceholder"},{"name":"priority","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"When true, the image will be considered high priority and preload.\\nShould only be used when the image is visible above the fold. Defaults to false.\\nIs used only in server-side rendering.","description":"<p>When true, the image will be considered high priority and preload.\\nShould only be used when the image is visible above the fold. Defaults to false.\\nIs used only in server-side rendering.</p>\\n","line":73,"type":"boolean"},{"name":"sizes","defaultValue":"\'100vw\'","deprecated":false,"deprecationMessage":"","rawdescription":"A string mapping media queries to device sizes. Defaults to `100vw`.\\nWe recommend setting sizes when using `layout=\\"responsive\\"` or `layout=\\"fill\\"` and your image will not be the same width as the viewport.","description":"<p>A string mapping media queries to device sizes. Defaults to <code>100vw</code>.\\nWe recommend setting sizes when using <code>layout=&quot;responsive&quot;</code> or <code>layout=&quot;fill&quot;</code> and your image will not be the same width as the viewport.</p>\\n","line":66,"type":"string"},{"name":"src","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"Required, must be a path string. This can be either an absolute external URL, or an internal path depending on the loader.","description":"<p>Required, must be a path string. This can be either an absolute external URL, or an internal path depending on the loader.</p>\\n","line":32,"type":"string"},{"name":"unoptimized","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"When true, the source image will be served as-is instead of changing quality, size, or format. Defaults to `false`.","description":"<p>When true, the source image will be served as-is instead of changing quality, size, or format. Defaults to <code>false</code>.</p>\\n","line":96,"type":"boolean"},{"name":"width","deprecated":false,"deprecationMessage":"","rawdescription":"The width of the image, in pixels. Must be an integer without a unit.\\nRequired, except for those with `layout=\\"fill\\"`.","description":"<p>The width of the image, in pixels. Must be an integer without a unit.\\nRequired, except for those with <code>layout=&quot;fill&quot;</code>.</p>\\n","line":44,"type":"number"}],"outputsClass":[{"name":"loadingComplete","defaultValue":"new EventEmitter<void>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nOutput emits once the image is completely loaded and the placeholder has been removed.\\n","description":"<p>Output emits once the image is completely loaded and the placeholder has been removed.</p>\\n","line":111,"type":"EventEmitter"}],"propertiesClass":[{"name":"blurBackgroundImage$","defaultValue":"this.changes$.pipe(\\n    map(() => {\\n      if (this.placeholder === \'blur\') {\\n        return this.blurDataURL ? `url(\\"${this.blurDataURL}\\")` : `url(\\"${this.imageLoader.getPlaceholderSrc(this.src)}\\")`;\\n      } else {\\n        return \'none\';\\n      }\\n    })\\n  )","deprecated":false,"deprecationMessage":"","type":"Observable<string>","optional":false,"description":"","line":176,"modifierKind":[142]},{"name":"image","deprecated":false,"deprecationMessage":"","type":"ElementRef<HTMLImageElement>","optional":true,"description":"","line":27,"decorators":[{"name":"ViewChild","stringifiedArguments":"\'image\', {static: false}"}],"modifierKind":[142]},{"name":"sizerSvg$","defaultValue":"this.changes$.pipe(\\n    map(() => {\\n      if (this.layout !== \'intrinsic\') {\\n        return null;\\n      }\\n\\n      // Create a placeholder svg and convert it to base64\\n      const sizerSvg: string = this.window.btoa(\\n        `<svg width=\\"${this.width}\\" height=\\"${this.height}\\" xmlns=\\"http://www.w3.org/2000/svg\\" version=\\"1.1\\"/>`\\n      );\\n\\n      return this.domSanitizer.bypassSecurityTrustUrl(`data:image/svg+xml;base64,${sizerSvg}`);\\n    })\\n  )","deprecated":false,"deprecationMessage":"","type":"Observable<SafeUrl | null>","optional":false,"description":"","line":148,"modifierKind":[142]},{"name":"sources$","defaultValue":"this.changes$.pipe(\\n    map(() =>\\n      this.imageLoader.getImageSources({\\n        src: this.src,\\n        width: this.width,\\n        layout: this.layout,\\n        sizes: this.sizes,\\n        unoptimized: this.unoptimized,\\n      })\\n    )\\n  )","deprecated":false,"deprecationMessage":"","type":"Observable<ImageSources[]>","optional":false,"description":"","line":164,"modifierKind":[142]}],"methodsClass":[{"name":"getImageMime","args":[{"name":"_","type":"number","deprecated":false,"deprecationMessage":""},{"type":"ImageSources","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"any","typeParameters":[],"line":202,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"_","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"type":"ImageSources","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"onLoad","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":206,"deprecated":false,"deprecationMessage":""}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import {\\n  Component,\\n  ChangeDetectionStrategy,\\n  Input,\\n  Output,\\n  EventEmitter,\\n  OnChanges,\\n  isDevMode,\\n  AfterViewInit,\\n  ViewChild,\\n  ElementRef,\\n} from \'@angular/core\';\\nimport { DomSanitizer, SafeUrl } from \'@angular/platform-browser\';\\nimport { Observable, Subject } from \'rxjs\';\\nimport { map, startWith } from \'rxjs/operators\';\\n\\nimport { ImageLayout, ImagePlaceholder, ObjectFit, ImageSources } from \'../models\';\\nimport { ImageLoader } from \'../services\';\\n\\n@Component({\\n  selector: \'image[src]\',\\n  templateUrl: \'image.component.html\',\\n  styleUrls: [\'image.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class ImageComponent implements OnChanges, AfterViewInit {\\n  @ViewChild(\'image\', { static: false }) readonly image?: ElementRef<HTMLImageElement>;\\n\\n  /**\\n   * Required, must be a path string. This can be either an absolute external URL, or an internal path depending on the loader.\\n   */\\n  @Input() src = \'\';\\n\\n  /**\\n   * The `alt` attribute provides alternative information for an image if a user for some reason cannot view it\\n   * (because of slow connection, an error in the src attribute, or if the user uses a screen reader).\\n   */\\n  @Input() alt = \'\';\\n\\n  /**\\n   * The width of the image, in pixels. Must be an integer without a unit.\\n   * Required, except for those with `layout=\\"fill\\"`.\\n   */\\n  @Input() width?: number;\\n\\n  /**\\n   * The height of the image, in pixels. Must be an integer without a unit.\\n   * Required, except for those with `layout=\\"fill\\"`.\\n   */\\n  @Input() height?: number;\\n\\n  /**\\n   * The layout behavior of the image as the viewport changes size. Defaults to `intrinsic`.\\n   *\\n   * * When `fixed,` the image dimensions will not change as the viewport changes (no responsiveness) similar to the native img element.\\n   * * When `intrinsic`, the image will scale the dimensions down for smaller viewports but maintain the original dimensions for larger viewports.\\n   * * When `responsive`, the image will scale the dimensions down for smaller viewports and scale up for larger viewports.\\n   * * When `fill`, the image will stretch both width and height to the dimensions of the parent element, provided the parent element is relative. This is usually paired with the objectFit property.\\n   */\\n  @Input() layout: ImageLayout = \'intrinsic\';\\n\\n  /**\\n   * A string mapping media queries to device sizes. Defaults to `100vw`.\\n   * We recommend setting sizes when using `layout=\\"responsive\\"` or `layout=\\"fill\\"` and your image will not be the same width as the viewport.\\n   */\\n  @Input() sizes = \'100vw\';\\n\\n  /**\\n   * When true, the image will be considered high priority and preload.\\n   * Should only be used when the image is visible above the fold. Defaults to false.\\n   * Is used only in server-side rendering.\\n   */\\n  @Input() priority = false;\\n\\n  /**\\n   * A placeholder to use while the image is loading in base, possible values are blur or empty. Defaults to `empty`.\\n   *\\n   * When `blur`, the `blurDataURL` property will be used as the placeholder.\\n   * If using server-side rendering then `blurDataURL` will automatically be populated.\\n   *\\n   * When `empty`, there will be no placeholder while the image is loading, only empty space.\\n   */\\n  @Input() placeholder: ImagePlaceholder = \'empty\';\\n\\n  /**\\n   * A Data URL to be used as a placeholder image before the `src` image successfully loads. Only takes effect when combined with `placeholder=\\"blur\\"`.\\n   * Must be a base64-encoded image. It will be enlarged and blurred, so a very small image (10px or less) is recommended. Including larger images as placeholders may harm your application performance.\\n   *\\n   * If not provided inline and the loader supports optimization a small placeholder will be fetched automatically.\\n   */\\n  @Input() blurDataURL?: string;\\n\\n  /**\\n   * When true, the source image will be served as-is instead of changing quality, size, or format. Defaults to `false`.\\n   */\\n  @Input() unoptimized = false;\\n\\n  /**\\n   * The image fit when using `layout=\\"fill\\"`.\\n   */\\n  @Input() objectFit: ObjectFit = \'cover\';\\n\\n  /**\\n   * The image fit when using `layout=\\"fill\\"`.\\n   */\\n  @Input() objectPosition = \'50% 50%\';\\n\\n  /**\\n   * Output emits once the image is completely loaded and the placeholder has been removed.\\n   */\\n  @Output() loadingComplete = new EventEmitter<void>();\\n\\n  get loading(): \'eager\' | \'lazy\' {\\n    return this.priority ? \'eager\' : \'lazy\';\\n  }\\n\\n  get showSizer(): boolean {\\n    return this.layout === \'intrinsic\' || this.layout === \'responsive\';\\n  }\\n\\n  get sizeRatio(): number {\\n    return this.height == null || this.width == null ? 0 : this.height / this.width;\\n  }\\n\\n  get sizerPaddingTop(): string {\\n    return this.layout === \'responsive\' ? `${this.sizeRatio * 100}%` : \'auto\';\\n  }\\n\\n  get wrapperWidth(): string {\\n    return this.layout === \'fixed\' ? `${this.width ?? 0}px` : \'auto\';\\n  }\\n\\n  get wrapperHeight(): string {\\n    return this.layout === \'fixed\' ? `${this.height ?? 0}px` : \'auto\';\\n  }\\n\\n  get blurFilter(): string {\\n    if (this.placeholder === \'blur\' && this.blurDataURL && !this.isImageLoaded) {\\n      return `blur(20px)`;\\n    } else {\\n      return \'none\';\\n    }\\n  }\\n\\n  private readonly ngOnChanges$ = new Subject<void>();\\n  private readonly changes$: Observable<void> = this.ngOnChanges$.pipe(startWith(undefined as void));\\n\\n  readonly sizerSvg$: Observable<SafeUrl | null> = this.changes$.pipe(\\n    map(() => {\\n      if (this.layout !== \'intrinsic\') {\\n        return null;\\n      }\\n\\n      // Create a placeholder svg and convert it to base64\\n      const sizerSvg: string = this.window.btoa(\\n        `<svg width=\\"${this.width}\\" height=\\"${this.height}\\" xmlns=\\"http://www.w3.org/2000/svg\\" version=\\"1.1\\"/>`\\n      );\\n\\n      return this.domSanitizer.bypassSecurityTrustUrl(`data:image/svg+xml;base64,${sizerSvg}`);\\n    })\\n  );\\n\\n  // TODO: Make this reactive based on network\\n  readonly sources$: Observable<ImageSources[]> = this.changes$.pipe(\\n    map(() =>\\n      this.imageLoader.getImageSources({\\n        src: this.src,\\n        width: this.width,\\n        layout: this.layout,\\n        sizes: this.sizes,\\n        unoptimized: this.unoptimized,\\n      })\\n    )\\n  );\\n\\n  readonly blurBackgroundImage$: Observable<string> = this.changes$.pipe(\\n    map(() => {\\n      if (this.placeholder === \'blur\') {\\n        return this.blurDataURL ? `url(\\"${this.blurDataURL}\\")` : `url(\\"${this.imageLoader.getPlaceholderSrc(this.src)}\\")`;\\n      } else {\\n        return \'none\';\\n      }\\n    })\\n  );\\n\\n  private isImageLoaded = false;\\n\\n  constructor(private readonly imageLoader: ImageLoader, private readonly window: Window, private readonly domSanitizer: DomSanitizer) {}\\n\\n  ngOnChanges() {\\n    this.validateInputs();\\n    this.ngOnChanges$.next();\\n  }\\n\\n  ngAfterViewInit() {\\n    if (this.image?.nativeElement.complete) {\\n      // In case the image was rendered by SSR and already completed\\n      this.onLoad();\\n    }\\n  }\\n\\n  getImageMime(_: number, { mimeType: mime }: ImageSources) {\\n    return mime;\\n  }\\n\\n  onLoad() {\\n    if (!this.image) {\\n      return;\\n    }\\n\\n    if (!this.image.nativeElement.src.startsWith(\'data:\')) {\\n      const decodePromise: Promise<void> = \'decode\' in this.image.nativeElement ? this.image.nativeElement.decode() : Promise.resolve();\\n\\n      decodePromise\\n        .catch(() => null)\\n        .then(() => {\\n          this.isImageLoaded = true;\\n          this.loadingComplete.emit();\\n        });\\n    }\\n\\n    if (!isDevMode() || this.layout !== \'intrinsic\') {\\n      return;\\n    }\\n\\n    // Check if the size of the image was OK, can help while developing\\n\\n    const { naturalWidth, naturalHeight } = this.image.nativeElement;\\n\\n    if (this.width != null && this.width != naturalWidth) {\\n      console.warn(`Image with src \\"${this.src}\\" should have \\"width\\" of ${naturalWidth}.`);\\n    }\\n\\n    if (this.height != null && this.height != naturalHeight) {\\n      console.warn(`Image with src \\"${this.src}\\" should have \\"height\\" of ${naturalHeight}.`);\\n    }\\n  }\\n\\n  private validateInputs() {\\n    if (this.src.startsWith(\'data:\')) {\\n      // https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\\n      this.unoptimized = true;\\n      this.priority = false;\\n    }\\n\\n    if (this.layout !== \'fill\' && (this.width == null || this.height == null || this.width <= 0 || this.height <= 0)) {\\n      throw new Error(`Image with src \\"${this.src}\\" must use \\"width\\" and \\"height\\" properties or \\"layout=\'fill\'\\" property.`);\\n    }\\n\\n    if (!isDevMode()) {\\n      return;\\n    }\\n\\n    if (this.layout === \'fill\' && (this.width != null || this.width != null)) {\\n      `Image with src \\"${this.src}\\" and \\"layout=\'fill\'\\" has unused properties assigned. Please remove \\"width\\" and \\"height\\".`;\\n    }\\n\\n    if (this.alt.trim().length === 0) {\\n      console.warn(`Image with src \\"${this.src}\\" must use an \\"alt\\" property.`);\\n    }\\n\\n    if (!this.unoptimized && !this.imageLoader.supportsOptimization) {\\n      console.warn(\\n        `Image with src \\"${this.src}\\" uses a loader that does not implement width. Please implement it or use the \\"unoptimized\\" property instead.`\\n      );\\n    }\\n\\n    if (this.placeholder === \'blur\') {\\n      if (this.layout !== \'fill\' && (this.width ?? 0) * (this.height ?? 0) < 1600) {\\n        console.warn(\\n          `Image with src \\"${this.src}\\" is smaller than 40x40. Consider removing the \\"placeholder=\'blur\'\\" property to improve performance.`\\n        );\\n      }\\n\\n      if (!this.blurDataURL && !this.imageLoader.supportsOptimization) {\\n        console.warn(\\n          `Image with src \\"${this.src}\\" has \\"placeholder=\'blur\'\\" property but is missing the \\"blurDataURL\\" property. ` +\\n            `Placeholder could be fetched from the loader, but it doesn\'t support optimization. ` +\\n            `Please implement it, or pass an inline \\"blurDataURL\\".`\\n        );\\n      }\\n    }\\n  }\\n\\n  // TODO: Implement as a structural directive\\n  // TODO: support intersection observer\\n  // TODO: provide default image loaders https://github.com/vercel/next.js/blob/807d1ec7ef5925a4fa4b93b61ab72a8c5760531b/packages/next/client/image.tsx#L651\\n  // TODO: unit tests\\n  // TODO: in SSR use as background color the predominant one\\n  // TODO: generate blur placeholder in SSR\\n  // TODO: implement priority adding preload to head in SSR\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":".wrapper {\\n  display: block;\\n  overflow: hidden;\\n  box-sizing: border-box;\\n  margin: 0;\\n\\n  &--fill {\\n    position: absolute;\\n    top: 0;\\n    left: 0;\\n    bottom: 0;\\n    right: 0;\\n  }\\n\\n  &--responsive {\\n    position: relative;\\n  }\\n\\n  &--intrinsic {\\n    display: inline-block;\\n    max-width: 100%;\\n    position: relative;\\n  }\\n\\n  &--fixed {\\n    display: inline-block;\\n    position: relative;\\n  }\\n\\n  & .sizer {\\n    display: block;\\n    box-sizing: border-box;\\n\\n    &--intrinsic {\\n      max-width: 100%;\\n    }\\n\\n    & .sizer__content {\\n      max-width: 100%;\\n      display: block;\\n      margin: 0;\\n      border: none;\\n      padding: 0;\\n    }\\n  }\\n}\\n\\n.img {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  bottom: 0;\\n  right: 0;\\n\\n  box-sizing: border-box;\\n  padding: 0;\\n  border: none;\\n  margin: auto;\\n\\n  display: block;\\n  width: 0;\\n  height: 0;\\n  min-width: 100%;\\n  max-width: 100%;\\n  min-height: 100%;\\n  max-height: 100%;\\n\\n  transition: filter 0.1s ease-in-out;\\n}\\n","styleUrl":"image.component.scss"}],"stylesData":"","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"imageLoader","type":"ImageLoader","deprecated":false,"deprecationMessage":""},{"name":"window","type":"Window","deprecated":false,"deprecationMessage":""},{"name":"domSanitizer","type":"DomSanitizer","deprecated":false,"deprecationMessage":""}],"line":186,"jsdoctags":[{"name":"imageLoader","type":"ImageLoader","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"window","type":"Window","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"domSanitizer","type":"DomSanitizer","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"implements":["OnChanges","AfterViewInit"],"accessors":{"loading":{"name":"loading","getSignature":{"name":"loading","type":"","returnType":"\\"eager\\" | \\"lazy\\"","line":113}},"showSizer":{"name":"showSizer","getSignature":{"name":"showSizer","type":"boolean","returnType":"boolean","line":117}},"sizeRatio":{"name":"sizeRatio","getSignature":{"name":"sizeRatio","type":"number","returnType":"number","line":121}},"sizerPaddingTop":{"name":"sizerPaddingTop","getSignature":{"name":"sizerPaddingTop","type":"string","returnType":"string","line":125}},"wrapperWidth":{"name":"wrapperWidth","getSignature":{"name":"wrapperWidth","type":"string","returnType":"string","line":129}},"wrapperHeight":{"name":"wrapperHeight","getSignature":{"name":"wrapperHeight","type":"string","returnType":"string","line":133}},"blurFilter":{"name":"blurFilter","getSignature":{"name":"blurFilter","type":"string","returnType":"string","line":137}}},"templateData":"<div class=\\"wrapper wrapper--{{ layout }}\\" [style.width]=\\"wrapperWidth\\" [style.height]=\\"wrapperHeight\\">\\n  <div class=\\"sizer sizer--{{ layout }}\\" [style.padding-top]=\\"sizerPaddingTop\\" *ngIf=\\"showSizer\\">\\n    <img *ngIf=\\"sizerSvg$ | async as sizerSrc\\" [src]=\\"sizerSrc\\" class=\\"sizer__content\\" aria-hidden=\\"true\\" alt=\\"\\" role=\\"presentation\\" />\\n  </div>\\n  <picture>\\n    <ng-container *ngFor=\\"let source of sources$ | async; let last = last; trackBy: getImageMime\\">\\n      <ng-template #sourceTemplate>\\n        <source [type]=\\"source.mimeType\\" [srcset]=\\"source.srcset\\" [sizes]=\\"sizes\\" />\\n      </ng-template>\\n      <img\\n        #image\\n        *ngIf=\\"last; else sourceTemplate\\"\\n        [srcset]=\\"source.srcset\\"\\n        [sizes]=\\"source.sizes\\"\\n        [src]=\\"source.src\\"\\n        class=\\"img\\"\\n        [alt]=\\"alt\\"\\n        [attr.loading]=\\"loading\\"\\n        decoding=\\"async\\"\\n        [style.objectFit]=\\"objectFit\\"\\n        [style.objectPosition]=\\"objectPosition\\"\\n        [style.backgroundSize]=\\"objectFit\\"\\n        [style.backgroundPosition]=\\"objectPosition\\"\\n        [style.backgroundImage]=\\"(blurBackgroundImage$ | async) ?? \'none\'\\"\\n        [style.filter]=\\"blurFilter\\"\\n        (load)=\\"onLoad()\\"\\n      />\\n    </ng-container>\\n  </picture>\\n</div>\\n"}],"modules":[{"name":"ImageModule","id":"module-ImageModule-052fa6c11601e6b93afea584050a2f50","description":"","deprecationMessage":"","deprecated":false,"file":"src/lib/image.module.ts","methods":[{"name":"forRoot","args":[{"type":"ImageModuleConfig","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"ModuleWithProviders<ImageModule>","typeParameters":[],"line":20,"deprecated":false,"deprecationMessage":"","modifierKind":[123],"jsdoctags":[{"type":"ImageModuleConfig","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ModuleWithProviders, NgModule } from \'@angular/core\';\\n\\nimport { defaultImageOptimizerConfig, ImageOptimizerConfig } from \'@ng-easy/image-config\';\\n\\nimport { ImageComponent } from \'./component\';\\nimport { DefaultImageLoader, ImageLoader } from \'./services\';\\nimport { IMAGE_OPTIMIZER_CONFIG } from \'./tokens\';\\n\\nexport interface ImageModuleConfig {\\n  imageOptimizerConfig?: ImageOptimizerConfig;\\n}\\n\\n@NgModule({\\n  declarations: [ImageComponent],\\n  imports: [CommonModule],\\n  exports: [ImageComponent],\\n})\\nexport class ImageModule {\\n  static forRoot({ imageOptimizerConfig }: ImageModuleConfig): ModuleWithProviders<ImageModule> {\\n    return {\\n      ngModule: ImageModule,\\n      providers: [\\n        { provide: ImageLoader, useClass: DefaultImageLoader },\\n        { provide: IMAGE_OPTIMIZER_CONFIG, useValue: imageOptimizerConfig ?? defaultImageOptimizerConfig },\\n        { provide: Window, useValue: window },\\n      ],\\n    };\\n  }\\n}\\n","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[{"name":"ImageComponent"}]},{"type":"imports","elements":[]},{"type":"exports","elements":[{"name":"ImageComponent"}]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]}],"miscellaneous":{"variables":[{"name":"Fill","ctype":"miscellaneous","subtype":"variable","file":"src/lib/image.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"Fixed","ctype":"miscellaneous","subtype":"variable","file":"src/lib/image.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"IMAGE_OPTIMIZER_CONFIG","ctype":"miscellaneous","subtype":"variable","file":"src/lib/tokens/image-optimizer-config.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"new InjectionToken<ImageOptimizerConfig>(\'@ng-easy/image:image-optimizer-config\')"},{"name":"Intrinsic","ctype":"miscellaneous","subtype":"variable","file":"src/lib/image.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"placeholderQuality","ctype":"miscellaneous","subtype":"variable","file":"src/lib/services/image-loader.ts","deprecated":false,"deprecationMessage":"","type":"number","defaultValue":"15"},{"name":"placeholderWidth","ctype":"miscellaneous","subtype":"variable","file":"src/lib/services/image-loader.ts","deprecated":false,"deprecationMessage":"","type":"number","defaultValue":"15"},{"name":"preferredOptimizedFormats","ctype":"miscellaneous","subtype":"variable","file":"src/lib/services/image-loader.ts","deprecated":false,"deprecationMessage":"","type":"ImageFormat[]","defaultValue":"[ImageFormat.Webp, ImageFormat.Avif, ImageFormat.Heif, ImageFormat.Jpeg] as const"},{"name":"randomWidth","ctype":"miscellaneous","subtype":"variable","file":"src/lib/services/image-loader.ts","deprecated":false,"deprecationMessage":"","type":"number","defaultValue":"Math.floor(Math.random() * 1000) + 100"},{"name":"Responsive","ctype":"miscellaneous","subtype":"variable","file":"src/lib/image.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"src/lib/image.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story<ImageComponent>","defaultValue":"(args: ImageComponent) => ({\\n  component: ImageComponent,\\n  props: args,\\n})"},{"name":"viewportWidthRe","ctype":"miscellaneous","subtype":"variable","file":"src/lib/services/image-loader.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"/(^|\\\\s)(1?\\\\d?\\\\d)vw/g"}],"functions":[{"name":"getQuality","file":"src/lib/functions/image-quality.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"configQuality","deprecated":false,"deprecationMessage":""}],"returnType":"number","jsdoctags":[{"name":"configQuality","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"typealiases":[{"name":"ImageLayout","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"fixed\\" | \\"intrinsic\\" | \\"responsive\\" | \\"fill\\"","file":"src/lib/models/image-layout.ts","deprecated":false,"deprecationMessage":"","description":"<p>The layout behavior of the image as the viewport changes size. Defaults to <code>intrinsic</code>.</p>\\n<ul>\\n<li>When <code>fixed,</code> the image dimensions will not change as the viewport changes (no responsiveness) similar to the native img element.</li>\\n<li>When <code>intrinsic</code>, the image will scale the dimensions down for smaller viewports but maintain the original dimensions for larger viewports.</li>\\n<li>When <code>responsive</code>, the image will scale the dimensions down for smaller viewports and scale up for larger viewports.</li>\\n<li>When <code>fill</code>, the image will stretch both width and height to the dimensions of the parent element, provided the parent element is relative. This is usually paired with the objectFit property.</li>\\n</ul>\\n","kind":183},{"name":"ImagePlaceholder","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"empty\\" | \\"blur\\"","file":"src/lib/models/image-placeholder.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183},{"name":"ObjectFit","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"contain\\" | \\"cover\\" | \\"fill\\" | \\"none\\" | \\"scale-down\\"","file":"src/lib/models/object-fit.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"enumerations":[],"groupedVariables":{"src/lib/image.component.stories.ts":[{"name":"Fill","ctype":"miscellaneous","subtype":"variable","file":"src/lib/image.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"Fixed","ctype":"miscellaneous","subtype":"variable","file":"src/lib/image.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"Intrinsic","ctype":"miscellaneous","subtype":"variable","file":"src/lib/image.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"Responsive","ctype":"miscellaneous","subtype":"variable","file":"src/lib/image.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"src/lib/image.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story<ImageComponent>","defaultValue":"(args: ImageComponent) => ({\\n  component: ImageComponent,\\n  props: args,\\n})"}],"src/lib/tokens/image-optimizer-config.ts":[{"name":"IMAGE_OPTIMIZER_CONFIG","ctype":"miscellaneous","subtype":"variable","file":"src/lib/tokens/image-optimizer-config.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"new InjectionToken<ImageOptimizerConfig>(\'@ng-easy/image:image-optimizer-config\')"}],"src/lib/services/image-loader.ts":[{"name":"placeholderQuality","ctype":"miscellaneous","subtype":"variable","file":"src/lib/services/image-loader.ts","deprecated":false,"deprecationMessage":"","type":"number","defaultValue":"15"},{"name":"placeholderWidth","ctype":"miscellaneous","subtype":"variable","file":"src/lib/services/image-loader.ts","deprecated":false,"deprecationMessage":"","type":"number","defaultValue":"15"},{"name":"preferredOptimizedFormats","ctype":"miscellaneous","subtype":"variable","file":"src/lib/services/image-loader.ts","deprecated":false,"deprecationMessage":"","type":"ImageFormat[]","defaultValue":"[ImageFormat.Webp, ImageFormat.Avif, ImageFormat.Heif, ImageFormat.Jpeg] as const"},{"name":"randomWidth","ctype":"miscellaneous","subtype":"variable","file":"src/lib/services/image-loader.ts","deprecated":false,"deprecationMessage":"","type":"number","defaultValue":"Math.floor(Math.random() * 1000) + 100"},{"name":"viewportWidthRe","ctype":"miscellaneous","subtype":"variable","file":"src/lib/services/image-loader.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"/(^|\\\\s)(1?\\\\d?\\\\d)vw/g"}]},"groupedFunctions":{"src/lib/functions/image-quality.ts":[{"name":"getQuality","file":"src/lib/functions/image-quality.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"configQuality","deprecated":false,"deprecationMessage":""}],"returnType":"number","jsdoctags":[{"name":"configQuality","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}]},"groupedEnumerations":{},"groupedTypeAliases":{"src/lib/models/image-layout.ts":[{"name":"ImageLayout","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"fixed\\" | \\"intrinsic\\" | \\"responsive\\" | \\"fill\\"","file":"src/lib/models/image-layout.ts","deprecated":false,"deprecationMessage":"","description":"<p>The layout behavior of the image as the viewport changes size. Defaults to <code>intrinsic</code>.</p>\\n<ul>\\n<li>When <code>fixed,</code> the image dimensions will not change as the viewport changes (no responsiveness) similar to the native img element.</li>\\n<li>When <code>intrinsic</code>, the image will scale the dimensions down for smaller viewports but maintain the original dimensions for larger viewports.</li>\\n<li>When <code>responsive</code>, the image will scale the dimensions down for smaller viewports and scale up for larger viewports.</li>\\n<li>When <code>fill</code>, the image will stretch both width and height to the dimensions of the parent element, provided the parent element is relative. This is usually paired with the objectFit property.</li>\\n</ul>\\n","kind":183}],"src/lib/models/image-placeholder.ts":[{"name":"ImagePlaceholder","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"empty\\" | \\"blur\\"","file":"src/lib/models/image-placeholder.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"src/lib/models/object-fit.ts":[{"name":"ObjectFit","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"contain\\" | \\"cover\\" | \\"fill\\" | \\"none\\" | \\"scale-down\\"","file":"src/lib/models/object-fit.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}]}}}');var parameters={controls:{expanded:!0}};function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}(0,angular.setCompodocJson)(documentation_namespaceObject),Object.keys(preview_namespaceObject).forEach((function(key){var value=preview_namespaceObject[key];switch(key){case"args":case"argTypes":return esm.kg.warn("Invalid args/argTypes in config, ignoring.",JSON.stringify(value));case"decorators":return value.forEach((function(decorator){return(0,client_api.$9)(decorator,!1)}));case"loaders":return value.forEach((function(loader){return(0,client_api.HZ)(loader,!1)}));case"parameters":return(0,client_api.h1)(function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}({},value),!1);case"argTypesEnhancers":return value.forEach((function(enhancer){return(0,client_api.My)(enhancer)}));case"argsEnhancers":return value.forEach((function(enhancer){return(0,client_api._C)(enhancer)}));case"render":return(0,client_api.$P)(value);case"globals":case"globalTypes":var v={};return v[key]=value,(0,client_api.h1)(v,!1);default:return console.log(key+" was not supported :( !")}}))},43106:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__(70001)},21118:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>__WEBPACK_DEFAULT_EXPORT__});const __WEBPACK_DEFAULT_EXPORT__='<div class="wrapper wrapper--{{ layout }}" [style.width]="wrapperWidth" [style.height]="wrapperHeight">\n  <div class="sizer sizer--{{ layout }}" [style.padding-top]="sizerPaddingTop" *ngIf="showSizer">\n    <img *ngIf="sizerSvg$ | async as sizerSrc" [src]="sizerSrc" class="sizer__content" aria-hidden="true" alt="" role="presentation" />\n  </div>\n  <picture>\n    <ng-container *ngFor="let source of sources$ | async; let last = last; trackBy: getImageMime">\n      <ng-template #sourceTemplate>\n        <source [type]="source.mimeType" [srcset]="source.srcset" [sizes]="sizes" />\n      </ng-template>\n      <img\n        #image\n        *ngIf="last; else sourceTemplate"\n        [srcset]="source.srcset"\n        [sizes]="source.sizes"\n        [src]="source.src"\n        class="img"\n        [alt]="alt"\n        [attr.loading]="loading"\n        decoding="async"\n        [style.objectFit]="objectFit"\n        [style.objectPosition]="objectPosition"\n        [style.backgroundSize]="objectFit"\n        [style.backgroundPosition]="objectPosition"\n        [style.backgroundImage]="(blurBackgroundImage$ | async) ?? \'none\'"\n        [style.filter]="blurFilter"\n        (load)="onLoad()"\n      />\n    </ng-container>\n  </picture>\n</div>\n'},14909:module=>{"use strict";module.exports=".wrapper {\n  display: block;\n  overflow: hidden;\n  box-sizing: border-box;\n  margin: 0;\n}\n\n.wrapper--fill {\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n}\n\n.wrapper--responsive {\n  position: relative;\n}\n\n.wrapper--intrinsic {\n  display: inline-block;\n  max-width: 100%;\n  position: relative;\n}\n\n.wrapper--fixed {\n  display: inline-block;\n  position: relative;\n}\n\n.wrapper .sizer {\n  display: block;\n  box-sizing: border-box;\n}\n\n.wrapper .sizer--intrinsic {\n  max-width: 100%;\n}\n\n.wrapper .sizer .sizer__content {\n  max-width: 100%;\n  display: block;\n  margin: 0;\n  border: none;\n  padding: 0;\n}\n\n.img {\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  box-sizing: border-box;\n  padding: 0;\n  border: none;\n  margin: auto;\n  display: block;\n  width: 0;\n  height: 0;\n  min-width: 100%;\n  max-width: 100%;\n  min-height: 100%;\n  max-height: 100%;\n  transition: filter 0.1s ease-in-out;\n}"},24654:()=>{},4147:module=>{"use strict";module.exports={i8:"0.0.0"}}},__webpack_require__=>{var __webpack_exec__=moduleId=>__webpack_require__(__webpack_require__.s=moduleId);__webpack_require__.O(0,[450],(()=>(__webpack_exec__(37707),__webpack_exec__(99669),__webpack_exec__(43106),__webpack_exec__(17119),__webpack_exec__(26432),__webpack_exec__(84873),__webpack_exec__(62853),__webpack_exec__(81953),__webpack_exec__(22609),__webpack_exec__(64049),__webpack_exec__(21424),__webpack_exec__(31809),__webpack_exec__(11417))));__webpack_require__.O()}]);